#!/usr/bin/env bash
################################################################################
#: Title       : Custom_backup
#: Date        : 2017-Nov-30
#: Author      : Anthony Tilelli
#: Version     : .01
#: Description : Runs backups defined in configuration file
#: Options     : PENDING
################################################################################

# strict mode (http://redsymbol.net/articles/unofficial-bash-strict-mode/)
set -euo pipefail
#readonly ORIGINAL_IFS="$IFS"
#IFS=$'\n\t'

# CONSTANTS
readonly GL_BACKUP_CONFIG="backup.config"
readonly GL_PRMG_CONFIG="prgm.config"

# Global(Gl) Variables
Gl_cfg_BID=""
declare -u Gl_cfg_Action=""
Gl_cfg_Program=""
Gl_cfg_Arguments=""
Gl_cfg_Source=""
Gl_cfg_Backup=""
Gl_cfg_cd=""
Gl_cfg_UMASK=""
Gl_backup_command=""

# FUNCTIONS
function fail() {
  # Outputs error-message and force-quits script

  local -r ERRORCODE="$1"
  local -r ERROR_MESSAGE="$2"
  printf "ERROR %d: %s\\n" "$ERRORCODE" "$ERROR_MESSAGE" >&2
  exit "$ERRORCODE"
}

function print_globals() {
  # File
  printf "FILES USED\\n"
  printf "GL_BACKUP_CONFIG: %s\\n" "$GL_BACKUP_CONFIG"
  printf "GL_PRMG_CONFIG: %s\\n"   "$GL_PRMG_CONFIG"

  # Configs
  printf "Global Configs\\n"
  printf "Gl_cfg_BID: %s\\n"       "$Gl_cfg_BID"
  printf "Gl_cfg_Action: %s\\n"    "$Gl_cfg_Action"
  printf "Gl_cfg_Program: %s\\n"   "$Gl_cfg_Program"
  printf "Gl_cfg_Arguments: %s\\n" "$Gl_cfg_Arguments"
  printf "Gl_cfg_Source: %s\\n"    "$Gl_cfg_Source"
  printf "Gl_cfg_Backup: %s\\n"    "$Gl_cfg_Backup"
  printf "Gl_cfg_cd: %s\\n"        "$Gl_cfg_cd"
  printf "Gl_cfg_UMASK:%s\\n"      "$Gl_cfg_UMASK"

  # Command
  printf "Backup Command\\n"
  printf "Gl_backup_command: %s\\n" "$Gl_backup_command"
}

function validate_config_file() {
  # Evaluates config files:
  # - Readable/exist
  # - ASCII text
  # - Owned by script user or root
  # - Writable by owner only.

  # Return:
  # Returns 0 or exits with failure

  local -r USERID=${1} #UID of the user calling script
  local -r CONFIG=${2} #File to evaluate
  local config_user #config user owner

  #Validates config files is readable by script user
  if [[ -r "$CONFIG" ]]; then
    #Is file ASCII text?
    if [[ "$(file "$CONFIG")" =~ ": ASCII text" ]] ; then
      config_user=$(stat -c %u "$CONFIG")
      #If file owned by root or USERID
      if (( config_user == 0 )) || (( config_user == "$USERID" )) ; then
        #writable by owner only??
        if [[ "$(stat -c %A "$CONFIG")" != -r???--?-- ]]; then
          fail 10 "Wrong permissions on file: $CONFIG.(Is file write/executable by group/other?)"
        fi
      else
        fail 9 "\"$CONFIG\" is not owned by root or $USERID (File owner: $config_user)"
      fi
    else
      fail 8 "File \"$CONFIG\" is not ASCII text type"
    fi
  else
    fail 7 "Unable to use file: \"$CONFIG\". (Does files exist and is it readable?)"
  fi
  return 0
}

function load_config() {
  # Reads in backup config entry and convets to global variables

  # Reads Global variables:
  # - Gl_cfg_BID
  # - Gl_cfg_Action
  # - GL_BACKUP_CONFIG

  # Modifies Global variables:
  # - Gl_cfg_Program
  # - Gl_cfg_Arguments
  # - Gl_cfg_Source
  # - Gl_cfg_Backup
  # - Gl_cfg_cd
  # - Gl_cfg_UMASK

  local -r CONFIG_LINE=$(grep "^$Gl_cfg_BID:.*$Gl_cfg_Action" "$GL_BACKUP_CONFIG" | sed 's/\s*#.*//g')
  #sed - removes comments from end of lines
  local -r NUM_OF_ENTRIES=$(grep -c "^$Gl_cfg_BID:.*$Gl_cfg_Action" "$GL_BACKUP_CONFIG")
  local -r NUM_OF_COLUMNS=$(printf "%s\\n" "$CONFIG_LINE" | sed 's/[^:]//g' | wc -c)

  if (( NUM_OF_ENTRIES == 1 )); then
    if (( NUM_OF_COLUMNS == 8 )); then
      Gl_cfg_Program=$(printf "%s\\n" "$CONFIG_LINE"   | cut -f 3 -d ':')
      Gl_cfg_Arguments=$(printf "%s\\n" "$CONFIG_LINE" | cut -f 4 -d ':')
      Gl_cfg_Source=$(printf "%s\\n" "$CONFIG_LINE"    | cut -f 5 -d ':')
      Gl_cfg_Backup=$(printf "%s\\n" "$CONFIG_LINE"    | cut -f 6 -d ':')
      Gl_cfg_cd=$(printf "%s\\n" "$CONFIG_LINE"        | cut -f 7 -d ':')
      Gl_cfg_UMASK=$(printf "%s\\n" "$CONFIG_LINE"     | cut -f 8 -d ':')
    else
      fail 4 "Entry \"$CONFIG_LINE\" is incorrect"
    fi
  else
    fail 3 "$NUM_OF_ENTRIES entries found in $GL_BACKUP_CONFIG for \"$Gl_cfg_BID:$Gl_cfg_Action\""
  fi

  return 0
}

function load_prgm() {
  # Reads in program prmg entry and convets to backup command

  # Reads Global variables
  # - Gl_cfg_Program
  # - Gl_cfg_Action
  # - GL_PRMG_CONFIG
  # - Gl_cfg_Program
  # - Gl_cfg_Arguments
  # - Gl_cfg_Sourc
  # - Gl_cfg_Backup

  # Modifies Global variables:
  # - Gl_backup_command

  local -r CONFIG_LINE=$(grep "$Gl_cfg_Program:.*$Gl_cfg_Action" "$GL_PRMG_CONFIG" | sed 's/\s*#.*//g')
  #sed - removes comments from end of lines
  local -r NUM_OF_ENTRIES=$(grep -c "$Gl_cfg_Program:.*$Gl_cfg_Action" "$GL_PRMG_CONFIG")
  local -r NUM_OF_COLUMNS=$(printf "%s\\n" "$CONFIG_LINE" | sed 's/[^:]//g' | wc -c)
  local entry=""

  if (( NUM_OF_ENTRIES == 1 )); then
    Gl_backup_command="$Gl_cfg_Program "
    for (( col=3; col<=NUM_OF_COLUMNS; col++ )) ; do
      entry=$(printf "%s\\n" "$CONFIG_LINE" | cut -f "$col" -d ':')
      case "$entry" in
        "arguments")  Gl_backup_command+="${Gl_cfg_Arguments} "   ;;
        "source")     Gl_backup_command+="\"${Gl_cfg_Source}\" "  ;;
        "backup")     Gl_backup_command+="\"${Gl_cfg_Backup}\" "  ;;
        *)
          Gl_backup_command="false"
          fail 6 "$entry is unknown (col: $col)"
          ;;
      esac
    done
  else
    fail 5 "$NUM_OF_ENTRIES entries found in $GL_PRMG_CONFIG for \"$Gl_cfg_Program:$Gl_cfg_Action\""
  fi
}

function run_backup () { #TODO: not fully working as intented
  # Change directory and umask, if needed,  and runs backup

  local -r BACKUP_COMMAND="${1}" #Command to run backup (required)
  local -r WORKING_DIR="${2:-/}"
  #Directory to change to before running backup (default /)
  local -r SET_UMASK="${3:-SKIP}"
  #umask to set before running backup (default SKIP)

  cd "${WORKING_DIR}"
  case $SET_UMASK in #ensuring is a valid umask
    SKIP) ;; #DO-NOTHING
    [0-7] | [0-7][0-7] | [0-7][0-7][0-7] | [0-7][0-7][0-7][0-7] )
      umask "${SET_UMASK}"
      ;;
    *) fail 11  "umask is invalid (${SET_UMASK})" ;;
  esac
  echo "$BACKUP_COMMAND" #PLACEHOLDER
  #$BACKUP_COMMAND # ERROR:not expanding $HOME
  #TODO HANDLE IF BACKUP COMMAND FAILES
}

function usage_short() {
  #outputs usage
  printf "%s -[ioRs]-[B=<BID>] [-D]\\n" "${0##*/}"
}

usage() {
  #OUTPUT
  #help information

  usage_short
  printf "\\nAction Parameters (choose one)\\n"
  printf "  -i  Run INITIAL Action\\n"
  printf "  -o  Run ONGOING Action\\n"
  printf "  -R  Run RESTORE Action\\n"
  printf "  -s  Run SHOW    Action\\n"
  printf "  -h  Prints help message and exits\\n"
  printf "Backup ID\\n"
  printf "  -B=  sets backup ID (must start with \`=\`)\\n"
}

function main() {
  local cfg_BID=""
  local -u cfg_action=""
  local -i action_count=0

  validate_config_file "$UID" "$GL_BACKUP_CONFIG"
  validate_config_file "$UID" "$GL_PRMG_CONFIG"

  if (( $# == 0 )) ; then
    usage_short
    fail 15 "missing parameters"
  fi

  while getopts ":ioRshB:" opt; do
    case $opt in
      "i")  cfg_action="INITIAL" && action_count+=1 ;;
      "o")  cfg_action="ONGOING" && action_count+=1 ;;
      "R")  cfg_action="RESTORE" && action_count+=1 ;;
      "s")  cfg_action="SHOW"    && action_count+=1 ;;
      "h")  usage ; exit 0 ;;
      "B")
        if [[ -z "$cfg_BID" ]]; then
          if [[ $OPTARG =~ ^= ]]; then #$OPTARG must start with =
            cfg_BID="${OPTARG#=}" #removing starting "="
          else
           fail 17  "-B argument must start with \`=\` (OPTARG: ${OPTARG} is invalid)"
          fi
        else
          fail 16  "-B already set"
        fi
        ;;
      \?)  fail 13 "Invalid argument entered -${OPTARG}" ;;
      ":") fail 14 "-${OPTARG} requires an argument"     ;;
    esac
  done
  shift $((OPTIND-1))
  if (( action_count == 1 )) ; then
    if [[ $cfg_BID =~ ^# ]] ; then
      fail 18 "BID has # in it (${cfg_BID})"
    fi

    Gl_cfg_BID="$cfg_BID" # tmp
    Gl_cfg_Action="$cfg_action" #tmp
    load_config
    load_prgm
    print_globals

    #run_backup "$Gl_backup_command" "$Gl_cfg_cd" "$Gl_cfg_UMASK"
  else
    fail 12 "More or less then one action set (count: ${action_count})"
  fi
  return 0
}

main "$@"
exit 99

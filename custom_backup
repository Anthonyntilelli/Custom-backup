#!/usr/bin/env bash
################################################################################
#: Title       : Custom_backup
#: Date        : 2017-Nov-30
#: Author      : Anthony Tilelli
#: Version     : .01
#: Description : Runs backups defined in configuration file
#: Options     : PENDING
################################################################################

# strict mode (http://redsymbol.net/articles/unofficial-bash-strict-mode/)
set -euo pipefail
#readonly ORIGINAL_IFS="$IFS"
#IFS=$'\n\t'

# CONSTANTS
#readonly GL_BACKUP_CONFIG="testing/tar_local.test"
readonly GL_BACKUP_CONFIG="backup.config"
readonly GL_PRMG_CONFIG="prgm.config"
#readonly GL_PRMG_CONFIG="testing/tar.test"

# Global(Gl) Variables
Gl_cfg_BID="${1}"
Gl_cfg_Action="${2}"
Gl_cfg_Program=""
Gl_cfg_Arguments=""
Gl_cfg_Source=""
Gl_cfg_Backup=""
Gl_cfg_cd=""
Gl_cfg_UMASK=""
Gl_backup_command=""

# FUNCTIONS
function fail() {
# Outputs error-message and force-quits script
  local -r ERRORCODE=${1}
  local -r ERROR_MESSAGE="${2}"
  printf "%s\\n" "ERROR $ERRORCODE: $ERROR_MESSAGE" >&2
  exit "$ERRORCODE"
}

function print_globals() {
#File
printf "%s\\n" "FILES USED"
printf "%s\\n" "GL_BACKUP_CONFIG: $GL_BACKUP_CONFIG"
printf "%s\\n" "GL_PRMG_CONFIG: $GL_PRMG_CONFIG"

#Configs
printf "%s\\n" "Global Configs"
printf "%s\\n" "Gl_cfg_BID: $Gl_cfg_BID"
printf "%s\\n" "Gl_cfg_Action: $Gl_cfg_Action"
printf "%s\\n" "Gl_cfg_Program: $Gl_cfg_Program"
printf "%s\\n" "Gl_cfg_Arguments: $Gl_cfg_Arguments"
printf "%s\\n" "Gl_cfg_Source: $Gl_cfg_Source"
printf "%s\\n" "Gl_cfg_Backup: $Gl_cfg_Backup"
printf "%s\\n" "Gl_cfg_cd: $Gl_cfg_cd"
printf "%s\\n" "Gl_cfg_UMASK: $Gl_cfg_UMASK"

#Command
printf "%s\\n" "Backup Command"
printf "%s\\n" "Gl_backup_command: $Gl_backup_command"
}

function validate_config_file() {
# Evaluates config files:
# - Readable/exist
# - ASCII text
# - Owned by script user or root
# - Writable by owner only.

# RETURN:
# Returns 0 or exits with failure

  local -r USERID=${1} #UID of the user calling script
  local -r CONFIG=${2} #File to evaluate
  local config_user #config user owner

  #Validates config files is readable by script user
  if [[ -r "$CONFIG" ]]; then
    #Is file ASCII text?
    if [[ "$(file "$CONFIG")" =~ ": ASCII text" ]] ; then
     config_user=$(stat -c %u "$CONFIG")
     if (( config_user == 0 )) || (( config_user == $USERID )) ; then
       #writable by owner only??
       if [[ "$(stat -c %A "$CONFIG")" != -r???--?-- ]]; then
         fail 10 "Wrong permissions on file: $CONFIG. (Is file write/executable by group or other?)"
       fi
     else
       fail 9 "\"$CONFIG\" is not owned by root or $USERID (File owner: $config_user)"
      fi
    else
     fail 8 "File type is not ASCII text"
    fi
  else
    fail 7 "Unable to use file: \"$CONFIG\". (Does files exist and is it readable?)"
  fi

return 0

}

function load_config() {
# Reads in backup config entry and convets to global variables

# Reads Global variables:
# - Gl_cfg_BID
# - Gl_cfg_Action
# - GL_BACKUP_CONFIG


# Modifies Global variables:
# - Gl_cfg_Program
# - Gl_cfg_Arguments
# - Gl_cfg_Source
# - Gl_cfg_Backup
# - Gl_cfg_cd
# - Gl_cfg_UMASK

  local -r CONFIG_LINE=$(grep "^$Gl_cfg_BID:.*$Gl_cfg_Action" "$GL_BACKUP_CONFIG" | sed 's/\s*#.*//g')
  #sed - removes comments from end of lines
  local -r NUM_OF_ENTRIES=$(grep -c "^$Gl_cfg_BID:.*$Gl_cfg_Action" "$GL_BACKUP_CONFIG")
  local -r NUM_OF_COLUMNS=$(printf "%s\\n" "$CONFIG_LINE" | sed 's/[^:]//g' | wc -c)

  if (( NUM_OF_ENTRIES == 1 )); then
    if (( NUM_OF_COLUMNS == 8 )); then
      Gl_cfg_Program=$(printf "%s\\n" "$CONFIG_LINE"   | cut -f 3 -d ':')
      Gl_cfg_Arguments=$(printf "%s\\n" "$CONFIG_LINE" | cut -f 4 -d ':')
      Gl_cfg_Source=$(printf "%s\\n" "$CONFIG_LINE"    | cut -f 5 -d ':')
      Gl_cfg_Backup=$(printf "%s\\n" "$CONFIG_LINE"    | cut -f 6 -d ':')
      Gl_cfg_cd=$(printf "%s\\n" "$CONFIG_LINE"        | cut -f 7 -d ':')
      Gl_cfg_UMASK=$(printf "%s\\n" "$CONFIG_LINE"     | cut -f 8 -d ':')
    else
      fail 4 "Entry \"$CONFIG_LINE\" is incorrect"
    fi
  else
    fail 3 "$NUM_OF_ENTRIES entries found in $GL_BACKUP_CONFIG for \"$Gl_cfg_BID:$Gl_cfg_Action\""
  fi

  return 0
}

function load_prgm() {
# Reads in program prmg entry and convets to backup command

# Reads Global variables
# - Gl_cfg_Program
# - Gl_cfg_Action
# - GL_PRMG_CONFIG
# - Gl_cfg_Program
# - Gl_cfg_Arguments
# - Gl_cfg_Sourc
# - Gl_cfg_Backup

# # Modifies Global variables:
# - Gl_backup_command

  local -r CONFIG_LINE=$(grep "$Gl_cfg_Program:.*$Gl_cfg_Action" "$GL_PRMG_CONFIG" | sed 's/\s*#.*//g')
  #sed - removes comments from end of lines
  local -r NUM_OF_ENTRIES=$(grep -c "$Gl_cfg_Program:.*$Gl_cfg_Action" "$GL_PRMG_CONFIG")
  local -r NUM_OF_COLUMNS=$(printf "%s\\n" "$CONFIG_LINE" | sed 's/[^:]//g' | wc -c)
  local entry=""

  if (( NUM_OF_ENTRIES == 1 )); then
    Gl_backup_command="$Gl_cfg_Program "
    for (( col=3; col<=NUM_OF_COLUMNS; col++ )) ; do
      entry=$(printf "%s\\n" "$CONFIG_LINE" | cut -f "$col" -d ':')
      case "$entry" in
      "arguments")
        Gl_backup_command="${Gl_backup_command}${Gl_cfg_Arguments} " ;;
      "source")
        Gl_backup_command="${Gl_backup_command}\"${Gl_cfg_Source}\" " ;;
      "backup")
        Gl_backup_command="${Gl_backup_command}\"${Gl_cfg_Backup}\" " ;;
      *)
        Gl_backup_command="false"
        fail 6 "$entry is unknown (col: $col)"
        ;;
      esac
    done
  else
    fail 5 "$NUM_OF_ENTRIES entries found in $GL_PRMG_CONFIG for \"$Gl_cfg_Program:$Gl_cfg_Action\""
  fi
}

function run_backup () { #TODO: not fully working as intented
# Change directory and umask, if needed,  and runs backup

# Reads Global variables
# - Gl_cfg_cd
# - Gl_cfg_UMASK
# - Gl_backup_command

  if [[ -n "$Gl_cfg_UMASK" ]] ; then
    printf "%d" "$Gl_cfg_UMASK" > /dev/null
    #validating $Gl_cfg_UMASK is a number
    umask "$Gl_cfg_UMASK"
  fi
  if [[ -n "$Gl_cfg_cd" ]] ; then
    cd "$Gl_cfg_cd"
  else
    cd /
  fi
  set -x #PLACEHOLDER
  echo "$Gl_backup_command" #PLACEHOLDER
  $Gl_backup_command # ERROR:not expanding $HOME
}

#testing
validate_config_file "$UID" "$GL_BACKUP_CONFIG"
validate_config_file "$UID" "$GL_PRMG_CONFIG"
#load_config
#load_prgm
#run_backup
print_globals

exit 99
